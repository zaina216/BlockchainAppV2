package  com.example.blockchainappv2;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Sc_test extends Contract {
    public static final String BINARY = "608060405260405180602001604052806000815250600a90805190602001906200002b929190620002b4565b5060405180602001604052806000815250600b908051906020019062000053929190620002b4565b503480156200006157600080fd5b50600a8054620000719062000393565b80601f01602080910402602001604051908101604052809291908181526020018280546200009f9062000393565b8015620000f05780601f10620000c457610100808354040283529160200191620000f0565b820191906000526020600020905b815481529060010190602001808311620000d257829003601f168201915b5050505050600b8054620001049062000393565b80601f0160208091040260200160405190810160405280929190818152602001828054620001329062000393565b8015620001835780601f10620001575761010080835404028352916020019162000183565b820191906000526020600020905b8154815290600101906020018083116200016557829003601f168201915b505050505081818160009080519060200190620001a2929190620002b4565b508060019080519060200190620001bb929190620002b4565b505050620001de620001d2620001e660201b60201c565b620001ee60201b60201c565b5050620003c9565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620002c29062000393565b90600052602060002090601f016020900481019282620002e6576000855562000332565b82601f106200030157805160ff191683800117855562000332565b8280016001018555821562000332579182015b828111156200033157825182559160200191906001019062000314565b5b50905062000341919062000345565b5090565b5b808211156200036057600081600090555060010162000346565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003ac57607f821691505b60208210811415620003c357620003c262000364565b5b50919050565b61322e80620003d96000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637754305c116100b8578063c47f00271161007c578063c47f002714610361578063c87b56dd1461037d578063d3fc9864146103ad578063e985e9c5146103c9578063ee087212146103f9578063f2fde38b1461041557610142565b80637754305c146102cf5780638da5cb5b146102ed57806395d89b411461030b578063a22cb46514610329578063b88d4fde1461034557610142565b806325e9378f1161010a57806325e9378f146101fd57806342842e0e1461022d57806355f804b3146102495780636352211e1461026557806370a0823114610295578063715018a6146102c557610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806323b872dd146101e1575b600080fd5b610161600480360381019061015c9190611e2e565b610431565b60405161016e9190611e76565b60405180910390f35b61017f610513565b60405161018c9190611f2a565b60405180910390f35b6101af60048036038101906101aa9190611f82565b6105a5565b6040516101bc9190611ff0565b60405180910390f35b6101df60048036038101906101da9190612037565b61062a565b005b6101fb60048036038101906101f69190612077565b610742565b005b610217600480360381019061021291906121ff565b6107a2565b604051610224919061226a565b60405180910390f35b61024760048036038101906102429190612077565b610815565b005b610263600480360381019061025e9190612285565b610835565b005b61027f600480360381019061027a9190611f82565b6108cb565b60405161028c9190611ff0565b60405180910390f35b6102af60048036038101906102aa91906122ce565b61097d565b6040516102bc919061226a565b60405180910390f35b6102cd610a35565b005b6102d7610abd565b6040516102e49190611f2a565b60405180910390f35b6102f5610acc565b6040516103029190611ff0565b60405180910390f35b610313610af6565b6040516103209190611f2a565b60405180910390f35b610343600480360381019061033e9190612327565b610b88565b005b61035f600480360381019061035a9190612408565b610d09565b005b61037b60048036038101906103769190612285565b610d6b565b005b61039760048036038101906103929190611f82565b610d85565b6040516103a49190611f2a565b60405180910390f35b6103c760048036038101906103c2919061248b565b610ef8565b005b6103e360048036038101906103de91906124fa565b610f8d565b6040516103f09190611e76565b60405180910390f35b610413600480360381019061040e9190612285565b611021565b005b61042f600480360381019061042a91906122ce565b61103b565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104fc57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061050c575061050b82611133565b5b9050919050565b60606000805461052290612569565b80601f016020809104026020016040519081016040528092919081815260200182805461054e90612569565b801561059b5780601f106105705761010080835404028352916020019161059b565b820191906000526020600020905b81548152906001019060200180831161057e57829003601f168201915b5050505050905090565b60006105b08261119d565b6105ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e69061260d565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610635826108cb565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069d9061269f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106c5611209565b73ffffffffffffffffffffffffffffffffffffffff1614806106f457506106f3816106ee611209565b610f8d565b5b610733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072a90612731565b60405180910390fd5b61073d8383611211565b505050565b61075361074d611209565b826112ca565b610792576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610789906127c3565b60405180910390fd5b61079d8383836113a8565b505050565b60006107ae6009611604565b60006107ba600961161a565b90506107c68482611628565b6107d081846117f6565b7f71a1635bca0c2f56d9d8dce2efa8eec601d23e7ebbbf3d38dddc066b94c11885848483604051610803939291906127e3565b60405180910390a18091505092915050565b61083083838360405180602001604052806000815250610d09565b505050565b61083d611209565b73ffffffffffffffffffffffffffffffffffffffff1661085b610acc565b73ffffffffffffffffffffffffffffffffffffffff16146108b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a89061286d565b60405180910390fd5b80600890805190602001906108c7929190611d1f565b5050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096b906128ff565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e590612991565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a3d611209565b73ffffffffffffffffffffffffffffffffffffffff16610a5b610acc565b73ffffffffffffffffffffffffffffffffffffffff1614610ab1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa89061286d565b60405180910390fd5b610abb600061186a565b565b6060610ac7611930565b905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610b0590612569565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3190612569565b8015610b7e5780601f10610b5357610100808354040283529160200191610b7e565b820191906000526020600020905b815481529060010190602001808311610b6157829003601f168201915b5050505050905090565b610b90611209565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf5906129fd565b60405180910390fd5b8060056000610c0b611209565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610cb8611209565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610cfd9190611e76565b60405180910390a35050565b610d1a610d14611209565b836112ca565b610d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d50906127c3565b60405180910390fd5b610d65848484846119c2565b50505050565b80600a9080519060200190610d81929190611d1f565b5050565b6060610d908261119d565b610dcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc690612a8f565b60405180910390fd5b6000600760008481526020019081526020016000208054610def90612569565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1b90612569565b8015610e685780601f10610e3d57610100808354040283529160200191610e68565b820191906000526020600020905b815481529060010190602001808311610e4b57829003601f168201915b505050505090506000610e79611930565b9050600081511415610e8f578192505050610ef3565b600082511115610ec4578082604051602001610eac929190612aeb565b60405160208183030381529060405292505050610ef3565b80610ece85611a1e565b604051602001610edf929190612aeb565b604051602081830303815290604052925050505b919050565b610f00611209565b73ffffffffffffffffffffffffffffffffffffffff16610f1e610acc565b73ffffffffffffffffffffffffffffffffffffffff1614610f74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6b9061286d565b60405180910390fd5b610f7e8383611628565b610f8882826117f6565b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b80600b9080519060200190611037929190611d1f565b5050565b611043611209565b73ffffffffffffffffffffffffffffffffffffffff16611061610acc565b73ffffffffffffffffffffffffffffffffffffffff16146110b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ae9061286d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111e90612b81565b60405180910390fd5b6111308161186a565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611284836108cb565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006112d58261119d565b611314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130b90612c13565b60405180910390fd5b600061131f836108cb565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061138e57508373ffffffffffffffffffffffffffffffffffffffff16611376846105a5565b73ffffffffffffffffffffffffffffffffffffffff16145b8061139f575061139e8185610f8d565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113c8826108cb565b73ffffffffffffffffffffffffffffffffffffffff161461141e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141590612ca5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561148e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148590612d37565b60405180910390fd5b611499838383611b7f565b6114a4600082611211565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114f49190612d86565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461154b9190612dba565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168f90612e5c565b60405180910390fd5b6116a18161119d565b156116e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d890612ec8565b60405180910390fd5b6116ed60008383611b7f565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461173d9190612dba565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6117ff8261119d565b61183e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183590612f5a565b60405180910390fd5b80600760008481526020019081526020016000209080519060200190611865929190611d1f565b505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60606008805461193f90612569565b80601f016020809104026020016040519081016040528092919081815260200182805461196b90612569565b80156119b85780601f1061198d576101008083540402835291602001916119b8565b820191906000526020600020905b81548152906001019060200180831161199b57829003601f168201915b5050505050905090565b6119cd8484846113a8565b6119d984848484611b84565b611a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0f90612fec565b60405180910390fd5b50505050565b60606000821415611a66576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611b7a565b600082905060005b60008214611a98578080611a819061300c565b915050600a82611a919190613084565b9150611a6e565b60008167ffffffffffffffff811115611ab457611ab36120d4565b5b6040519080825280601f01601f191660200182016040528015611ae65781602001600182028036833780820191505090505b5090505b60008514611b7357600182611aff9190612d86565b9150600a85611b0e91906130b5565b6030611b1a9190612dba565b60f81b818381518110611b3057611b2f6130e6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611b6c9190613084565b9450611aea565b8093505050505b919050565b505050565b6000611ba58473ffffffffffffffffffffffffffffffffffffffff16611d0c565b15611cff578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611bce611209565b8786866040518563ffffffff1660e01b8152600401611bf0949392919061316a565b6020604051808303816000875af1925050508015611c2c57506040513d601f19601f82011682018060405250810190611c2991906131cb565b60015b611caf573d8060008114611c5c576040519150601f19603f3d011682016040523d82523d6000602084013e611c61565b606091505b50600081511415611ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9e90612fec565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611d04565b600190505b949350505050565b600080823b905060008111915050919050565b828054611d2b90612569565b90600052602060002090601f016020900481019282611d4d5760008555611d94565b82601f10611d6657805160ff1916838001178555611d94565b82800160010185558215611d94579182015b82811115611d93578251825591602001919060010190611d78565b5b509050611da19190611da5565b5090565b5b80821115611dbe576000816000905550600101611da6565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611e0b81611dd6565b8114611e1657600080fd5b50565b600081359050611e2881611e02565b92915050565b600060208284031215611e4457611e43611dcc565b5b6000611e5284828501611e19565b91505092915050565b60008115159050919050565b611e7081611e5b565b82525050565b6000602082019050611e8b6000830184611e67565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ecb578082015181840152602081019050611eb0565b83811115611eda576000848401525b50505050565b6000601f19601f8301169050919050565b6000611efc82611e91565b611f068185611e9c565b9350611f16818560208601611ead565b611f1f81611ee0565b840191505092915050565b60006020820190508181036000830152611f448184611ef1565b905092915050565b6000819050919050565b611f5f81611f4c565b8114611f6a57600080fd5b50565b600081359050611f7c81611f56565b92915050565b600060208284031215611f9857611f97611dcc565b5b6000611fa684828501611f6d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fda82611faf565b9050919050565b611fea81611fcf565b82525050565b60006020820190506120056000830184611fe1565b92915050565b61201481611fcf565b811461201f57600080fd5b50565b6000813590506120318161200b565b92915050565b6000806040838503121561204e5761204d611dcc565b5b600061205c85828601612022565b925050602061206d85828601611f6d565b9150509250929050565b6000806000606084860312156120905761208f611dcc565b5b600061209e86828701612022565b93505060206120af86828701612022565b92505060406120c086828701611f6d565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61210c82611ee0565b810181811067ffffffffffffffff8211171561212b5761212a6120d4565b5b80604052505050565b600061213e611dc2565b905061214a8282612103565b919050565b600067ffffffffffffffff82111561216a576121696120d4565b5b61217382611ee0565b9050602081019050919050565b82818337600083830152505050565b60006121a261219d8461214f565b612134565b9050828152602081018484840111156121be576121bd6120cf565b5b6121c9848285612180565b509392505050565b600082601f8301126121e6576121e56120ca565b5b81356121f684826020860161218f565b91505092915050565b6000806040838503121561221657612215611dcc565b5b600061222485828601612022565b925050602083013567ffffffffffffffff81111561224557612244611dd1565b5b612251858286016121d1565b9150509250929050565b61226481611f4c565b82525050565b600060208201905061227f600083018461225b565b92915050565b60006020828403121561229b5761229a611dcc565b5b600082013567ffffffffffffffff8111156122b9576122b8611dd1565b5b6122c5848285016121d1565b91505092915050565b6000602082840312156122e4576122e3611dcc565b5b60006122f284828501612022565b91505092915050565b61230481611e5b565b811461230f57600080fd5b50565b600081359050612321816122fb565b92915050565b6000806040838503121561233e5761233d611dcc565b5b600061234c85828601612022565b925050602061235d85828601612312565b9150509250929050565b600067ffffffffffffffff821115612382576123816120d4565b5b61238b82611ee0565b9050602081019050919050565b60006123ab6123a684612367565b612134565b9050828152602081018484840111156123c7576123c66120cf565b5b6123d2848285612180565b509392505050565b600082601f8301126123ef576123ee6120ca565b5b81356123ff848260208601612398565b91505092915050565b6000806000806080858703121561242257612421611dcc565b5b600061243087828801612022565b945050602061244187828801612022565b935050604061245287828801611f6d565b925050606085013567ffffffffffffffff81111561247357612472611dd1565b5b61247f878288016123da565b91505092959194509250565b6000806000606084860312156124a4576124a3611dcc565b5b60006124b286828701612022565b93505060206124c386828701611f6d565b925050604084013567ffffffffffffffff8111156124e4576124e3611dd1565b5b6124f0868287016121d1565b9150509250925092565b6000806040838503121561251157612510611dcc565b5b600061251f85828601612022565b925050602061253085828601612022565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061258157607f821691505b602082108114156125955761259461253a565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006125f7602c83611e9c565b91506126028261259b565b604082019050919050565b60006020820190508181036000830152612626816125ea565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612689602183611e9c565b91506126948261262d565b604082019050919050565b600060208201905081810360008301526126b88161267c565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b600061271b603883611e9c565b9150612726826126bf565b604082019050919050565b6000602082019050818103600083015261274a8161270e565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006127ad603183611e9c565b91506127b882612751565b604082019050919050565b600060208201905081810360008301526127dc816127a0565b9050919050565b60006060820190506127f86000830186611fe1565b818103602083015261280a8185611ef1565b9050612819604083018461225b565b949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612857602083611e9c565b915061286282612821565b602082019050919050565b600060208201905081810360008301526128868161284a565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006128e9602983611e9c565b91506128f48261288d565b604082019050919050565b60006020820190508181036000830152612918816128dc565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b600061297b602a83611e9c565b91506129868261291f565b604082019050919050565b600060208201905081810360008301526129aa8161296e565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006129e7601983611e9c565b91506129f2826129b1565b602082019050919050565b60006020820190508181036000830152612a16816129da565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000612a79602f83611e9c565b9150612a8482612a1d565b604082019050919050565b60006020820190508181036000830152612aa881612a6c565b9050919050565b600081905092915050565b6000612ac582611e91565b612acf8185612aaf565b9350612adf818560208601611ead565b80840191505092915050565b6000612af78285612aba565b9150612b038284612aba565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612b6b602683611e9c565b9150612b7682612b0f565b604082019050919050565b60006020820190508181036000830152612b9a81612b5e565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612bfd602c83611e9c565b9150612c0882612ba1565b604082019050919050565b60006020820190508181036000830152612c2c81612bf0565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b6000612c8f602983611e9c565b9150612c9a82612c33565b604082019050919050565b60006020820190508181036000830152612cbe81612c82565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612d21602483611e9c565b9150612d2c82612cc5565b604082019050919050565b60006020820190508181036000830152612d5081612d14565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d9182611f4c565b9150612d9c83611f4c565b925082821015612daf57612dae612d57565b5b828203905092915050565b6000612dc582611f4c565b9150612dd083611f4c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e0557612e04612d57565b5b828201905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612e46602083611e9c565b9150612e5182612e10565b602082019050919050565b60006020820190508181036000830152612e7581612e39565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612eb2601c83611e9c565b9150612ebd82612e7c565b602082019050919050565b60006020820190508181036000830152612ee181612ea5565b9050919050565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612f44602c83611e9c565b9150612f4f82612ee8565b604082019050919050565b60006020820190508181036000830152612f7381612f37565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612fd6603283611e9c565b9150612fe182612f7a565b604082019050919050565b6000602082019050818103600083015261300581612fc9565b9050919050565b600061301782611f4c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561304a57613049612d57565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061308f82611f4c565b915061309a83611f4c565b9250826130aa576130a9613055565b5b828204905092915050565b60006130c082611f4c565b91506130cb83611f4c565b9250826130db576130da613055565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061313c82613115565b6131468185613120565b9350613156818560208601611ead565b61315f81611ee0565b840191505092915050565b600060808201905061317f6000830187611fe1565b61318c6020830186611fe1565b613199604083018561225b565b81810360608301526131ab8184613131565b905095945050505050565b6000815190506131c581611e02565b92915050565b6000602082840312156131e1576131e0611dcc565b5b60006131ef848285016131b6565b9150509291505056fea2646970667358221220ca75016f873013b2979b8271c9fd13d34a0445e5dda168730fc87e614c1cdbbe64736f6c634300080a0033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETURI = "getURI";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTUNIQUETOKEN = "mintUniqueToken";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBASEURI = "setBaseURI";

    public static final String FUNC_SETNAME = "setName";

    public static final String FUNC_SETSYM = "setSym";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event MINTUNIQUETOKEN_EVENT = new Event("mintuniqueToken", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Sc_test(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Sc_test(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Sc_test(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Sc_test(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<MintuniqueTokenEventResponse> getMintuniqueTokenEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MINTUNIQUETOKEN_EVENT, transactionReceipt);
        ArrayList<MintuniqueTokenEventResponse> responses = new ArrayList<MintuniqueTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintuniqueTokenEventResponse typedResponse = new MintuniqueTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._to = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._tokenURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.newTokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintuniqueTokenEventResponse> mintuniqueTokenEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MintuniqueTokenEventResponse>() {
            @Override
            public MintuniqueTokenEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MINTUNIQUETOKEN_EVENT, log);
                MintuniqueTokenEventResponse typedResponse = new MintuniqueTokenEventResponse();
                typedResponse.log = log;
                typedResponse._to = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._tokenURI = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.newTokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintuniqueTokenEventResponse> mintuniqueTokenEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINTUNIQUETOKEN_EVENT));
        return mintuniqueTokenEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> getURI() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETURI, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String _to, BigInteger _tokenId, String tokenURI_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.Utf8String(tokenURI_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintUniqueToken(String _to, String _tokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTUNIQUETOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.Utf8String(_tokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBaseURI(String baseURI_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBASEURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(baseURI_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setName(String newName) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSym(String newSym) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSYM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newSym)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Sc_test load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Sc_test(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Sc_test load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Sc_test(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Sc_test load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Sc_test(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Sc_test load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Sc_test(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Sc_test> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Sc_test.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Sc_test> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Sc_test.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Sc_test> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Sc_test.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Sc_test> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Sc_test.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class MintuniqueTokenEventResponse extends BaseEventResponse {
        public String _to;

        public String _tokenURI;

        public BigInteger newTokenId;
    }
}
